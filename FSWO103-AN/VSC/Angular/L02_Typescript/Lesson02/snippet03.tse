interface Person {
  name: string;
}

interface CanFly {
  flyHeight: number;
}

class Superman implements Person, CanFly {
  name: string;
  flyHeight: number;

  constructor(name: string, flyHeight: number) {
    this.name = name;
    this.flyHeight = flyHeight;
  }
}

console.log("Registrant: 1");
var kal_el = new Superman("Kal-el", 10000);
console.log(kal_el.name);
console.log(kal_el.flyHeight);
console.log();

interface HasPowers extends CanFly {
  powers: string[];
}

class Incredible implements Person, HasPowers {
  name: string;
  flyHeight: number;
  powers: string[];

  constructor(name: string, flyHeight: number, powers: string[]) {
    this.name = name;
    this.flyHeight = flyHeight;
    this.powers = powers;
  }
}

console.log("Registrant: 2");
const elastigirl = new Incredible("elastigirl", 1000, [
  "Can stretch out enough to catch an updraft",
  "Not so much fly as glide"
]);
console.log(elastigirl);
console.log();
interface PersonThatHasPowers {
  name: string;
  flyHeight: number;
  powers: string[];
}

console.log("Registrant: 3");
const frozone = <PersonThatHasPowers>{};
frozone.name = "frozone";
frozone.flyHeight = 10000;
frozone.powers = [
  "Freeze water from any moisture",
  "Ice Skate on his frozen water"
];
console.log(frozone);
console.log();
